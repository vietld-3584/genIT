import { describe, it, expect, beforeEach } from 'vitest'
import request from 'supertest'
import { server } from '../server'
import { createTestUser } from '../setup'

describe('POST /auth/logout', () => {
  let testUser: any
  let authToken: string

  beforeEach(async () => {
    // Create test user
    testUser = await createTestUser({
      email: 'testuser@example.com',
      name: 'Test User'
    })
    
    // Mock valid JWT token - in real implementation this would be generated by signin
    authToken = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.valid_token'
  })

  it('LOGOUT_01: Successful logout', async () => {
    await request(server)
      .post('/api/auth/logout')
      .set('Authorization', authToken)
      .expect(200)
      .expect('Content-Type', /json/)
      .expect((res) => {
        expect(res.body).toHaveProperty('message', 'Logout successful')
      })
  })

  it('LOGOUT_02: No token provided', async () => {
    await request(server)
      .post('/api/auth/logout')
      .expect(401)
      .expect('Content-Type', /json/)
      .expect((res) => {
        expect(res.body).toHaveProperty('error', 'Unauthorized')
        expect(res.body).toHaveProperty('message', 'Access token required')
      })
  })

  it('LOGOUT_03: Invalid token', async () => {
    await request(server)
      .post('/api/auth/logout')
      .set('Authorization', 'Bearer invalid_token')
      .expect(401)
      .expect('Content-Type', /json/)
      .expect((res) => {
        expect(res.body).toHaveProperty('error', 'Unauthorized')
        expect(res.body).toHaveProperty('message', 'Invalid access token')
      })
  })

  it('LOGOUT_04: Expired token', async () => {
    await request(server)
      .post('/api/auth/logout')
      .set('Authorization', 'Bearer expired_token')
      .expect(401)
      .expect('Content-Type', /json/)
      .expect((res) => {
        expect(res.body).toHaveProperty('error', 'Unauthorized')
        expect(res.body).toHaveProperty('message', 'Token has expired')
      })
  })
})